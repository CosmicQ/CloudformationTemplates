{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "General Docker Cluster and Application Load Balancer using exported outputs from the VPC stack.  Bastion access is optional",


  "Metadata": {
    "AWS::CloudFormation::Interface": {
      "ParameterGroups": [
        {
          "Label": { "default": "Cluster Info" },
          "Parameters": [ "ClusterName", "DesiredCapacity", "MinCapacity", "MaxCapacity" ]
        },
        {
          "Label": { "default": "Instance Settings" },
          "Parameters": [ "EC2InstanceType", "Ec2KeyName" ]
        },
        {
          "Label": { "default": "Misc" },
          "Parameters": [ "VpcStack", "Environment", "AddBastionAccess" ]
        }
      ]
    }
  },


  "Parameters": {
    "Environment": {
      "Type": "String",
      "Default": "dev",
      "AllowedValues": [ "dev", "int", "prd"  ]
    },
    "Hostname": {
      "Type": "String",
      "Default": "dockerhost"
    },
    "VpcStack": {
      "Description": "VPC Stack Name",
      "Default": "VPC",
      "Type": "String"
    },
    "Ec2KeyName": {
      "Type": "AWS::EC2::KeyPair::KeyName",
      "Description": "Name of an existing EC2 KeyPair to enable SSH access to the ECS instances"
    },
    "BastionAccess": {
      "Type": "String",
      "Default": "Yes",
      "AllowedValues": [ "Yes", "No" ]
    },
    "EC2InstanceType": {
      "Type": "String",
      "Default": "t2.micro",
      "AllowedValues": [ "t2.micro", "t2.small", "t2.medium", "t2.large", "m3.large", "m4.large", "m4.xlarge" ],
      "ConstraintDescription": "must be a valid EC2 instance type."
    },
    "ClusterName": {
      "Type": "String",
      "Default": "Docker",
      "Description": "Name of the cluster"
    },
    "DesiredCapacity": {
      "Type": "Number",
      "Default": "0",
      "Description": "Number of instances to launch in your ECS cluster"
    },
    "MinCapacity": {
      "Type": "Number",
      "Default": "0",
      "Description": "Max number of instances to launch in your ECS cluster"
    },
    "MaxCapacity": {
      "Type": "Number",
      "Default": "10",
      "Description": "Max number of instances to launch in your ECS cluster"
    }
  },


  "Outputs": {
    "DockerLoadBalancer": { "Value": { "Ref": "DockerLoadBalancer" }, "Export": { "Name": {"Fn::Sub": "${VpcStack}:DockerLoadBalancer" }} },
    "AMIID"             : { "Value": { "Fn::ImportValue": "DefaultECSAMI" }}
  },


  "Conditions": {
    "AddBastionAccess": {"Fn::Equals": [{ "Ref": "BastionAccess" }, "Yes" ]}
  },


  "Resources": {
    "ECSCluster": {
      "Type": "AWS::ECS::Cluster"
    },

    "SgLoadBalancer": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "VpcId": { "Fn::ImportValue": {"Fn::Sub": "${VpcStack}:AwsVpcId" }},
        "GroupDescription": "The source security group for all traffic entering the cluster",
        "Tags": [
          { "Key": "Name", "Value": {"Fn::Sub": "${ClusterName}:ClusterLoadBalancer" }},
          { "Key": "env", "Value": { "Ref": "Environment" } }
        ]
      }
    },

    "SgServer": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "VpcId": { "Fn::ImportValue": {"Fn::Sub": "${VpcStack}:AwsVpcId" }},
        "GroupDescription": "General Security Group for Docker Cluster",
        "Tags": [
          { "Key": "Name", "Value": {"Fn::Sub": "${ClusterName}:ClusterServer" }},
          { "Key": "env", "Value": { "Ref": "Environment" } }
        ],
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "0",
            "ToPort": "65535",
            "SourceSecurityGroupId": { "Ref": "SgLoadBalancer" }
          },
          {
            "IpProtocol": "icmp",
            "FromPort"  : "-1",
            "ToPort"    : "-1",
            "CidrIp"    : { "Fn::ImportValue": { "Fn::Sub": "${VpcStack}:VpcCidr" } }
          }
        ]
      }
    },

    "SgServerBastion": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Condition": "AddBastionAccess",
      "Properties": {
        "GroupId": { "Ref": "SgServer" },
        "IpProtocol": "tcp",
        "FromPort": "22",
        "ToPort": "22",
        "SourceSecurityGroupId": { "Fn::ImportValue": {"Fn::Sub": "${VpcStack}:BastionSSH" }}
      }
    },

    "DockerLoadBalancer": {
      "Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
      "Properties": {
        "Name": "DockerServicesLb",
        "Scheme" : "internet-facing",
        "Subnets" : [
                      {"Fn::ImportValue": {"Fn::Sub": "${VpcStack}:SubnetPub1" }},
                      {"Fn::ImportValue": {"Fn::Sub": "${VpcStack}:SubnetPub2" }}
                    ],
        "Tags" : [
          { "Key": "Name", "Value": {"Fn::Sub": "${ClusterName}:ClusterALB" }},
          { "Key" : "env", "Value" : { "Ref": "Environment" } }
        ]
      }
    },

    "AutoScalingGroup": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "Properties": {
        "LaunchConfigurationName": { "Ref": "ECSHost" },
        "MinSize": { "Ref": "MinCapacity" },
        "MaxSize": { "Ref": "MaxCapacity" },
        "DesiredCapacity": { "Ref": "DesiredCapacity" },
        "VPCZoneIdentifier": [
                      {"Fn::ImportValue": {"Fn::Sub": "${VpcStack}:SubnetPriv1" }},
                      {"Fn::ImportValue": {"Fn::Sub": "${VpcStack}:SubnetPriv2" }}
                    ],
        "Tags": [
          { "Key": "env", "Value": { "Ref": "Environment" }, "PropagateAtLaunch": "true" },
          { "Key": "Name", "Value": { "Ref": "Hostname" }, "PropagateAtLaunch": "true" },
          { "Key": "role", "Value": "dockerClusterServer", "PropagateAtLaunch": "true" }
        ]
      },
      "UpdatePolicy": {
        "AutoScalingRollingUpdate": {
          "MinInstancesInService": "1",
          "MaxBatchSize": "1",
          "PauseTime": "PT5M",
          "WaitOnResourceSignals": "false"
        }
      }
    },

    "ECSHost": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Properties": {
        "ImageId": { "Fn::ImportValue": "DefaultECSAMI" },
        "InstanceType": { "Ref": "EC2InstanceType" },
        "IamInstanceProfile": { "Fn::ImportValue": "EC2BasicFunctionsProfile" },
        "KeyName": { "Ref": "Ec2KeyName" },
        "SecurityGroups": [ { "Ref": "SgServer" } ],
        "UserData": { "Fn::Base64": { "Fn::Join": [ "", [
          "#!/bin/bash\n",
          "yum -y update && yum -y install awscli aws-cfn-bootstrap ruby wget\n",
          "\n",
          "NUM=`curl -s http://169.254.169.254/latest/meta-data/local-ipv4 |awk -F. '{print $3\"-\"$4}'` ",
          "&& sed -i \"s/HOSTNAME=localhost.localdomain/HOSTNAME=", {"Ref": "Hostname"}, "-$NUM/\" /etc/sysconfig/network ",
          "&& hostname ", {"Ref": "Hostname"}, "-$NUM",
          "\n",
          "cd /home/ec2-user\n",
          "wget https://aws-codedeploy-", { "Ref": "AWS::Region" }, ".s3.amazonaws.com/latest/install\n",
          "chmod +x ./install\n",
          "sudo ./install auto\n",
          "\n",
          "cat <<'EOF'>> /var/spool/cron/root\n",
          "0 23 * * * yum -y update --security --exclude=kernel* > /dev/null 2>&1\n",
          "EOF\n",
          "\n",
          "echo ECS_CLUSTER=", { "Ref": "ECSCluster" }, " >> /etc/ecs/ecs.config\n",
          "start ecs\n",
          "\n",
          "# Make sure the agent is running before completing\n",
          "RESULT=1\n",
          "until [ $RESULT == 0 ]; do\n",
          "        curl http://localhost:51600\n",
          "        RESULT=$?\n",
          "done\n",
          "\n",
          "/opt/aws/bin/cfn-signal -e $? ",
          "         --stack ", { "Ref": "AWS::StackName" },
          "         --resource AutoScalingGroup ",
          "         --region ", { "Ref": "AWS::Region" }, 
          "\n"
        ]] }}
      }
    }
  }
}
